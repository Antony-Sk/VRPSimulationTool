<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CVRP Problem Demo</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }
        .section {
            margin-bottom: 20px;
            padding: 15px;
            border: 1px solid #ddd;
            border-radius: 5px;
        }
        .section-title {
            margin-top: 0;
        }
        .form-group {
            margin-bottom: 10px;
        }
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        input, select {
            width: 100%;
            padding: 8px;
            box-sizing: border-box;
        }
        button {
            background-color: #4CAF50;
            color: white;
            padding: 10px 15px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
        }
        button:hover {
            background-color: #45a049;
        }
        #response {
            margin-top: 20px;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            min-height: 100px;
            white-space: pre-wrap;
        }
        .location-item, .edge-item, .vehicle-item {
            margin-bottom: 10px;
            padding: 10px;
            background-color: #f9f9f9;
            border-radius: 4px;
        }
        .remove-btn {
            background-color: #f44336;
            margin-left: 10px;
        }
    </style>
</head>
<body>
    <h1>CVRP Problem Demo</h1>
    
    <div class="section">
        <h2 class="section-title">Problem Configuration</h2>
        <div class="form-group">
            <label for="numVehicles">Number of Vehicles:</label>
            <input type="number" id="numVehicles" min="1" value="2">
        </div>
    </div>
    
    <div class="section">
        <h2 class="section-title">Vehicles</h2>
        <div id="vehicles-container">
            <!-- Vehicles will be added here -->
        </div>
        <button id="addVehicle">Add Vehicle</button>
    </div>
    
    <div class="section">
        <h2 class="section-title">Locations</h2>
        <div id="locations-container">
            <!-- Locations will be added here -->
        </div>
        <button id="addLocation">Add Location</button>
    </div>
    
    <div class="section">
        <h2 class="section-title">Edges</h2>
        <div id="edges-container">
            <!-- Edges will be added here -->
        </div>
        <button id="addEdge">Add Edge</button>
    </div>
    
    <button id="submitProblem">Solve CVRP Problem</button>
    
    <div id="response"></div>

    <script>
        // DOM elements
        const numVehiclesInput = document.getElementById('numVehicles');
        const vehiclesContainer = document.getElementById('vehicles-container');
        const locationsContainer = document.getElementById('locations-container');
        const edgesContainer = document.getElementById('edges-container');
        const addVehicleBtn = document.getElementById('addVehicle');
        const addLocationBtn = document.getElementById('addLocation');
        const addEdgeBtn = document.getElementById('addEdge');
        const submitBtn = document.getElementById('submitProblem');
        const responseDiv = document.getElementById('response');

        // Track indices for locations (for edges to reference)
        let locationIndices = [];
        
        // Add vehicle form
        addVehicleBtn.addEventListener('click', () => {
            const vehicleDiv = document.createElement('div');
            vehicleDiv.className = 'vehicle-item';
            vehicleDiv.innerHTML = `
                <div class="form-group">
                    <label>Capacity:</label>
                    <input type="number" class="vehicle-capacity" min="0" step="0.1" value="50.0">
                </div>
                <div class="form-group">
                    <label>Start Position (x,y):</label>
                    <input type="text" class="vehicle-start-pos" placeholder="0.0,0.0" value="0.0,0.0">
                </div>
                <button class="remove-btn remove-vehicle">Remove</button>
            `;
            vehiclesContainer.appendChild(vehicleDiv);
            
            // Add remove button functionality
            vehicleDiv.querySelector('.remove-vehicle').addEventListener('click', () => {
                vehicleDiv.remove();
            });
        });
        
        // Add location form
        addLocationBtn.addEventListener('click', () => {
            const index = locationIndices.length;
            const locationDiv = document.createElement('div');
            locationDiv.className = 'location-item';
            locationDiv.innerHTML = `
                <div class="form-group">
                    <label>Location ${index} - Coordinates (x,y):</label>
                    <input type="text" class="location-coords" placeholder="0.0,0.0" value="${index}.0,${index}.0">
                </div>
                <div class="form-group">
                    <label>Demand:</label>
                    <input type="number" class="location-demand" min="0" value="10">
                </div>
                <button class="remove-btn remove-location">Remove</button>
            `;
            locationsContainer.appendChild(locationDiv);
            locationIndices.push(index);
            
            // Add remove button functionality
            locationDiv.querySelector('.remove-location').addEventListener('click', () => {
                locationDiv.remove();
                locationIndices = locationIndices.filter(i => i !== index);
                // Update edge references if needed
            });
        });
        
        // Add edge form
        addEdgeBtn.addEventListener('click', () => {
            const edgeDiv = document.createElement('div');
            edgeDiv.className = 'edge-item';
            edgeDiv.innerHTML = `
                <div class="form-group">
                    <label>From (location index):</label>
                    <input type="number" class="edge-from" min="0" value="0">
                </div>
                <div class="form-group">
                    <label>To (location index):</label>
                    <input type="number" class="edge-to" min="0" value="1">
                </div>
                <div class="form-group">
                    <label>Cost:</label>
                    <input type="number" class="edge-cost" min="0" step="0.1" value="1.0">
                </div>
                <button class="remove-btn remove-edge">Remove</button>
            `;
            edgesContainer.appendChild(edgeDiv);
            
            // Add remove button functionality
            edgeDiv.querySelector('.remove-edge').addEventListener('click', () => {
                edgeDiv.remove();
            });
        });
        
        // Submit problem to backend
        submitBtn.addEventListener('click', async () => {
            try {
                // Collect vehicles data
                const vehicles = [];
                const vehicleElements = vehiclesContainer.querySelectorAll('.vehicle-item');
                vehicleElements.forEach(vehicleEl => {
                    vehicles.push({
                        capacity: parseFloat(vehicleEl.querySelector('.vehicle-capacity').value),
                        start_position: [
                            vehicleEl.querySelector('.vehicle-start-pos').value
                                .split(',')
                                .map(coord => parseFloat(coord.trim()))
                        ]
                    });
                });
                
                // Collect locations data
                const vertices = [];
                const locationElements = locationsContainer.querySelectorAll('.location-item');
                locationElements.forEach((locationEl, index) => {
                    vertices.push({
                        coordinates: locationEl.querySelector('.location-coords').value
                            .split(',')
                            .map(coord => parseFloat(coord.trim())),
                        demand: parseInt(locationEl.querySelector('.location-demand').value)
                    });
                });
                
                // Collect edges data
                const edges = [];
                const edgeElements = edgesContainer.querySelectorAll('.edge-item');
                edgeElements.forEach(edgeEl => {
                    edges.push({
                        frm: parseInt(edgeEl.querySelector('.edge-from').value),
                        to: parseInt(edgeEl.querySelector('.edge-to').value),
                        cost: parseFloat(edgeEl.querySelector('.edge-cost').value)
                    });
                });
                
                // Create problem object
                const problem = {
                    num_vehicles: parseInt(numVehiclesInput.value),
                    vehicles,
                    vertices,
                    edges
                };
                
                // Send to backend
                const response = await fetch('http://localhost:9000/solve-classic-vrp', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(problem)
                });
                
                const result = await response.json();
                responseDiv.textContent = JSON.stringify(result, null, 2);
            } catch (error) {
                responseDiv.textContent = `Error: ${error.message}`;
            }
        });
        
        // Initialize with some default data
        addVehicleBtn.click();
        addLocationBtn.click();
        addLocationBtn.click();
        addEdgeBtn.click();
    </script>
</body>
</html>